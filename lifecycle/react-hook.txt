
-----------------react hooks--------------------------

* useState
    + useState cho phép sử dụng state cục bộ trong một func component. 
        Truyền state ban đầu cho func này và nó trả về một biến có giá trị state hiện tại 
        (không nhất thiết là trạng thái ban đầu) và một hàm khác để cập nhật giá trị này.

    + tác dụng tương tự như state dùng trong class component

    + triển khai:
    
    import {useState} from 'react'

    function ABC() {
        const [myState, updateState] = useState(
            {
                name: "duong,
                age: 20 
            }
        );

        return (
            ...
        );
    }

    + khai báo và khởi tạo: thông thường useState() sẽ đi theo 1 cặp [myState, updateState]
        myState tương đương với this.state của class
        updateState tương đương với this.setState của class
        (lưu ý: myState và updateState chỉ là tên đặt, có thể đặt tên khác )

    + useState(initialStateValue); 
        initialStateValue: giá trị ban đầu của state (ko nhất thiết phải là obj như class component)

    + nếu như setState (class) là hợp nhất obj thì useState (func) là thay thế obj
        có state = {name: "duong"};

        setState({ age: '123' }); -----> state = {name: "duong", age: "123"};

        useState: updateState({ age: '123' }); --------> state = {age: "123"};

    + 
    const [value, updateValue] = useState(0)

    updateValue(1);
    updateValue( previousValue => previousValue + 1 );

    trong updateValue có thể nhận vào 1 function với đối số là value state trước đó


* useEffect

    + đc thực thi sau mỗi lần render (thực thi ít nhất 1 lần sau lần render đầu tiên)

    + từ những lần render sau, useEffect sẽ chỉ đc gọi nếu như dependencies thay đổi

    + Effect cleanup sẽ đc thực thi trước run effect lần tiếp theo hoặc unmount
    
    + useEffect có thể coi là sự kết hợp của componentDidMount, componentDidUpdate, và componentWillUnmount

    + side effect là những hành động event có thể làm thay đổi DOM trong react components
        gọi API, tương tác DOM, subscription, setTimeout, setInterval

    + useEffect(callback, dependencies);
        (3 trường hợp của dependencies 
            + ko có: hàm sẽ luôn luôn đc chạy sau render
            + [] : chạy duy nhất 1 lần sau render lần đầu
            + [<value>] : sẽ render nếu value thay đổi sau render
        )

    + 2 loại effect phổ biến: không cần cleanup, và cần cleanup 

    **effect không cần cleanup: (gọi API, tương tác DOM)
        Muốn chạy một vài đoạn code sau khi React đã cập nhập DOM. Network request, 
        tự ý thay đổi DOM, và logging là những ví dụ điển hình của effect không cần cleanup. 
        Gọi như vậy vì có thể chạy chúng và quên ngay lập tức.

        + ví dụ: chạy effect sau khi react đã cập nhập DOM
            ----------------class component--------------------
            class Example extends React.Component {
                constructor(props) {
                    super(props);
                    this.state = {
                    count: 0
                    };
                }

                componentDidMount() {
                    document.title = `You clicked ${this.state.count} times`;
                }
                componentDidUpdate() {
                    document.title = `You clicked ${this.state.count} times`;
                }

                render() {
                    return (
                    (... something)
                    );
                }
            }

            --------------------function component-----------------
            function Example() {
                const [count, setCount] = useState(0);

                useEffect(() => {
                    document.title = `You clicked ${count} times`;
                });

                return (
                (...something)
                );
            }




        + ---------------------class -------------------
             componentDidMount() {
                 //
             }

             componentWillUnmount() {
                 //
             }
        ---------------------function--------------------
            useEffect(() => {
                //
            }, []);

        + Theo mặc định, useEffect chạy sau lần render đầu tiên và mỗi lần update.

        + Không giống componentDidMount hoặc componentDidUpdate, effect chạy với useEffect không block trình duyệt cập nhập màn hình.



    **Effect cần Cleanup: subscription, setTimeout, setInterval

            useEffect(() => {
                function handleStatusChange(status) {
                    setIsOnline(status.isOnline);
                }

                ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
                
                return () => {
                    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
                };
            });

* useContext
    + useContext giúp bạn giảm bớt căng thẳng khi phải dựa vào Context theo ngữ cảnh. 
        React Context có một API đơn giản hơn khi so sánh với MyContext.Consumer và API đạo cụ kết xuất mà nó thể hiện.

    + Context: cung cấp cách để thực hiện chia sẻ dữ liệu tới các component trong cây mà không cần truyền dữ liệu qua props theo từng cấp bậc.


* useLayoutEffect
    + tác dụng tương tự useEffect

    + phân biệt useLayoutEffect và useEffect
        nếu cần thay đổi hình ảnh đối với DOM như một tác dụng phụ, 
            thì useEffect sẽ không phải là lựa chọn tốt nhất.

        Để ngăn người dùng nhìn thấy các thay đổi nhấp nháy, bạn có thể sử dụng useLayoutEffect. 
            Hàm được chuyển cho useLayoutEffect sẽ được chạy trước khi trình duyệt cập nhật màn hình.

* useReducer
    + useReducer có thể được sử dụng thay thế cho useState. Nó lý tưởng cho state logic phức tạp trong đó có sự phụ thuộc vào
        các giá trị state trước đó hoặc nhiều giá trị phụ của .

    + nhận vào 2 đối số: 
        const [state, dispatch] = useReducer(reducer, initialState)

        const reducer = (state, action) => {
            switch (action) {
                case 'plus':
                    return { width: state.width + 15 }
                case 'minus':
                    return { width: Math.max(state.width - 15, 2) }
                default:
                    throw new Error("what's going on?" )
            }
        }

        const initialState = {       
            width: 15;
        };

    + useReducer nhận tham số hàm thứ ba. Bạn có thể khởi tạo trạng thái từ hàm này và bất kỳ thứ gì được trả về từ hàm này
        sẽ được trả về dưới dạng state obj. Hàm này sẽ được gọi với InitialState - tham số thứ hai.

        const initializeState = () => ({
        width: 100
        })

        const reducer = (state, action) => {
            switch (action) {
                case 'plus':
                    return { width: state.width + 15 }
                case 'minus':
                    return { width: Math.max(state.width - 15, 2) }
                default:
                    throw new Error("what's going on?" )
            }
        }

        const initialState = {       
            width: 15;
        };

        const [state, dispatch] = useReducer(reducer, initialState, initializeState);

(khái niệm memoization: là 1 kĩ thuật giúp tăng tốc độ xử lý, cụ thể: nó sẽ lưu lại kết quả của các lần 
    tính toán trước đó, nếu như gặp lại bộ input cũ thì ko cần phải tính toán nữa mà đưa ra kết quả luôn)

* react.memo()
    + là 1 HOC, không phải hooks
    + tương tự như PureComponent
    + dùng trong func component
    + chỉ render lại component nếu props thay đổi
    + nếu trong những trường hợp đơn giản (như log ra 1 string nào đó) thì ko cần thiết phải sử dụng react.memo()
        trong trường hợp render lại các phần tử phức tạp (nguyên đồ thị) thì nên hạn chế re-render bằng cách sử dụng react.memo()

    + ví dụ
    -----------class-----------------
    export default class ABC extends PureComponent {
        render() {
            return (
                //
            );
        }
    }

    -------------func-----------------
    function ABC() {
        return (
            //
        );
    }

    export default React.memo(ABC);

* useCallback
    + được sử dụng để tối ưu quá trình render của func component. Hữu ích đối với trường hợp một component liên tục được re-render không cần thiết 
        trong quá trình xử lý sự kiện người dùng và có hành vi chức năng phức tạp.

    + useCallback trả về một callback đã ghi nhớ. Việc bao bọc một thành phần bằng React.Memo () báo hiệu ý định sử dụng lại mã. 
        Điều này không tự động mở rộng cho các hàm được truyền dưới dạng tham số.

    + React lưu một tham chiếu đến hàm khi được bao bọc bởi useCallback.

    + tạo ra memoized callback, chỉ tạo ra callback mới khi arr(dependencies) thay đổi, nếu dùng empty dependencies thì không bao h tạo ra func mới 

    + ví dụ 1 componet dùng useCallback với empty dependencies
        function App() {
            const abc = useCallback(() => {}, [])
            return (
                <div>
                //
                </div>
            );
        }

        (hàm abc sẽ chỉ đc gọi đúng 1 lần trong lần render đầu tiên, các lần render sau sẽ trả về nguyên abc lần đầu)

    + ví dụ 1 componet dùng useCallback với dependencies

        function Counter() {
            const [count, setCount] = useState(0);
            const [countOther, setCountOther] = useState(0);
            
            const increase = useCallback(() => setCount(count + 1), [count]);
            const decrease = useCallback(() => setCount(count - 1), [count]);
                
            const increaseOther = useCallback(() => setCountOther(countOther + 1), [countOther]);
            const decreaseOther = useCallback(() => setCountOther(countOther - 1), [countOther]);

            return (
                <>
                    <div>Count: {count}</div>
                    <button onClick={increase}>+</button>
                    <button onClick={increase}>-</button>

                    <div>Count other: {countOther}</div>
                    <button onClick={increaseOther}>+</button>
                    <button onClick={decreaseOther}>-</button>
                </>
	        )
        }

        Mỗi lần click vào bất kì nút tăng giảm sẽ 
            sẽ tạo ra phiên bản hoàn toàn mới của các hạm được tạo ra (re-render).


* useMemo

    + Hàm useMemo trả về một giá trị đã được ghi nhớ. useMemo khác với useCallback ở chỗ nó nội bộ hóa các giá trị trả về 
        thay vì toàn bộ các hàm. Thay vì truyền một xử lý cho cùng một hàm, React bỏ qua hàm và trả về kết quả trước đó, 
        cho đến khi các tham số thay đổi    

    + sử dụng useMemo ngăn chặn việc re-render 

    + tạo ra một memoixed value, chỉ tính toán value mới khi dependencies thay đổi

    + tham số truyền vào tương tự như useCallback

    + demo:
        function App() {
            const data = useMemo(() => [{}, {}, {}], []);
            return (
                <div>
                    //
                </div>
            );
        } 

* useRef    

    + tác dụng: lấy ra các giá trị hoặc trả về tag html (input, textarea,...)

    + cách dùng: tại thẻ cần tương tác thêm attribute ref

        import React, { useRef } from 'react';    

        const myRef = useRef(null);     // khởi tạo

        const func = () => {
            // hàm tương tác
            // cách truy cập đến refs
                let temp = myRef             // trả về thẻ html có attribute ref={myRef}
                let temp = myRef.current     // truy cập vào thuộc tính của thẻ 
                
                // ví dụ
                let temp = myRef.current.value   // trả về string chứa trong <input>
        }

        ...
        <input ref={myRef} />




















